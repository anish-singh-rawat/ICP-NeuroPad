type DaoDetails = record {
  dao_associated_ledger : principal;
  dao_desc : text;
  dao_name : text;
  agent_canister_id : principal;
};
type DaoGroup = record {
  group_members : vec principal;
  quorem : nat8;
  group_name : text;
  group_permissions : vec ProposalType;
};
type DaoInput = record {
  members : vec principal;
  image_title : text;
  token_symbol : text;
  linksandsocials : vec text;
  image_content : blob;
  dao_groups : vec DaoGroup;
  dao_name : text;
  image_id : text;
  members_permissions : vec ProposalType;
  link_of_document : text;
  image_content_type : text;
  ask_to_join_dao : bool;
  cool_down_period : nat32;
  token_name : text;
  proposal_entry : vec ProposalPlace;
  purpose : text;
  token_supply : nat32;
  required_votes : nat32;
};
type ImageData = record { content : blob; name : text; content_type : text };
type InitialArgs = record {
  agent_canister_id : principal;
  ic_asset_canister_id : principal;
  payment_recipient : principal;
};
type MinimalProfileinput = record {
  image_title : text;
  name : text;
  image_content : blob;
  image_content_type : text;
  email_id : text;
};
type Pagination = record { end : nat32; start : nat32 };
type Profileinput = record {
  image_title : text;
  username : text;
  twitter_id : text;
  image_content : blob;
  description : text;
  website : text;
  contact_number : text;
  image_content_type : text;
  email_id : text;
  profile_img : text;
  telegram : text;
  tag_defines : vec text;
};
type ProposalPlace = record {
  place_name : text;
  min_required_thredshold : nat64;
};
type ProposalType = variant {
  RemoveMemberToDaoProposal;
  ChangeDaoConfig;
  BountyDone;
  Polls;
  ChangeDaoPolicy;
  MintNewTokens;
  TokenTransfer;
  AddMemberToDaoProposal;
  RemoveMemberToGroupProposal;
  ChangeGroupPermissions;
  BountyRaised;
  AddMemberToGroupProposal;
  GeneralPurpose;
};
type ProposalValueStore = record {
  proposal_expired_at : nat64;
  minimum_threadsold : nat64;
  proposal_submitted_at : nat64;
  principal_action : principal;
  created_by : principal;
  associated_agent_canister_id : principal;
  proposal_description : text;
  proposal_id : text;
  propsal_title : text;
  proposal_type : ProposalType;
  required_votes : nat32;
  dao_members : vec principal;
};
type Result = variant { Ok : text; Err : text };
type Result_1 = variant { Ok : UserProfile; Err : text };
type Result_2 = variant { Ok : nat; Err : text };
type Result_3 = variant { Ok; Err : text };
type UserProfile = record {
  image_canister : principal;
  post_id : vec text;
  username : text;
  dao_ids : vec principal;
  join_dao : vec principal;
  twitter_id : text;
  description : text;
  post_count : nat32;
  user_id : principal;
  website : text;
  contact_number : text;
  email_id : text;
  profile_img : text;
  telegram : text;
  submitted_proposals : nat64;
  tag_defines : vec text;
};
service : (InitialArgs) -> {
  add_proposal : (ProposalValueStore) -> (Result);
  check_user_existance : () -> (Result) query;
  create_dao : (DaoInput) -> (Result);
  create_profile : (MinimalProfileinput) -> (Result);
  get_all_dao : () -> (vec DaoDetails) query;
  get_all_dao_pagination : (Pagination) -> (vec DaoDetails) query;
  get_proposals : (Pagination) -> (vec ProposalValueStore) query;
  get_user_profile : () -> (Result_1) query;
  make_payment_and_create_dao : (DaoInput) -> (Result);
  proposal_to_mint_new_dao_tokens : (principal, nat64) -> (Result_2);
  search_dao : (text) -> (vec DaoDetails) query;
  store_join_dao : (principal, principal) -> (Result_3);
  update_profile : (Profileinput) -> (Result_3);
  upload_image : (ImageData) -> (Result);
}
